{-# OPTIONS_GHC -Wno-incomplete-patterns #-}
import Data.List (nub)
{-
The sequence of triangle numbers is generated by adding 
the natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
-}


triangleNumbers = scanl1 (+) [1..]

primes = 2 : filter (null . tail . primeFactors) [3,5..]

primeFactors n = factor n primes
  where
    factor n (p:ps)
        | p*p > n = [n]
        | n `mod` p == 0 = p : factor (n `div` p) (p:ps)
        | otherwise = factor n ps


count pred = length . filter pred

countOccur ps = [count (==p) ps| p <- nub ps]

x = head [x | x <- triangleNumbers, product ((+1) `map` countOccur (primeFactors x)) > 500]


main :: IO ()
main = print x